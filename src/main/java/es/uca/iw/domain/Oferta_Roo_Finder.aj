// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.uca.iw.domain;

import es.uca.iw.domain.Empresa;
import es.uca.iw.domain.Oferta;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Oferta_Roo_Finder {
    
    public static Long Oferta.countFindOfertasByEmpresa(Empresa empresa) {
        if (empresa == null) throw new IllegalArgumentException("The empresa argument is required");
        EntityManager em = Oferta.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Oferta AS o WHERE o.empresa = :empresa", Long.class);
        q.setParameter("empresa", empresa);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Oferta.countFindOfertasByEmpresaLike(Empresa empresa) {
        if (empresa == null) throw new IllegalArgumentException("The empresa argument is required");
        EntityManager em = Oferta.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Oferta AS o WHERE LOWER(o.empresa) LIKE LOWER(:empresa)", Long.class);
        q.setParameter("empresa", empresa);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Oferta> Oferta.findOfertasByEmpresa(Empresa empresa) {
        if (empresa == null) throw new IllegalArgumentException("The empresa argument is required");
        EntityManager em = Oferta.entityManager();
        TypedQuery<Oferta> q = em.createQuery("SELECT o FROM Oferta AS o WHERE o.empresa = :empresa", Oferta.class);
        q.setParameter("empresa", empresa);
        return q;
    }
    
    public static TypedQuery<Oferta> Oferta.findOfertasByEmpresa(Empresa empresa, String sortFieldName, String sortOrder) {
        if (empresa == null) throw new IllegalArgumentException("The empresa argument is required");
        EntityManager em = Oferta.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Oferta AS o WHERE o.empresa = :empresa");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Oferta> q = em.createQuery(queryBuilder.toString(), Oferta.class);
        q.setParameter("empresa", empresa);
        return q;
    }
    
    public static TypedQuery<Oferta> Oferta.findOfertasByEmpresaLike(Empresa empresa) {
        if (empresa == null) throw new IllegalArgumentException("The empresa argument is required");
        EntityManager em = Oferta.entityManager();
        TypedQuery<Oferta> q = em.createQuery("SELECT o FROM Oferta AS o WHERE LOWER(o.empresa) LIKE LOWER(:empresa)", Oferta.class);
        q.setParameter("empresa", empresa);
        return q;
    }
    
    public static TypedQuery<Oferta> Oferta.findOfertasByEmpresaLike(Empresa empresa, String sortFieldName, String sortOrder) {
        if (empresa == null) throw new IllegalArgumentException("The empresa argument is required");
        EntityManager em = Oferta.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Oferta AS o WHERE LOWER(o.empresa) LIKE LOWER(:empresa)");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Oferta> q = em.createQuery(queryBuilder.toString(), Oferta.class);
        q.setParameter("empresa", empresa);
        return q;
    }
    
}
