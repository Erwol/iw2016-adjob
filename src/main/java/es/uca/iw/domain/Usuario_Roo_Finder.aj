// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.uca.iw.domain;

import es.uca.iw.domain.Usuario;
<<<<<<< HEAD
import es.uca.iw.reference.TipoUsuario;
=======
>>>>>>> 6cfd50639538555ce28e1e7bf8ef397311f4aa3a
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Usuario_Roo_Finder {
    
<<<<<<< HEAD
    public static Long Usuario.countFindUsuariosByEmail(String email) {
        if (email == null || email.length() == 0) throw new IllegalArgumentException("The email argument is required");
        EntityManager em = Usuario.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Usuario AS o WHERE o.email = :email", Long.class);
        q.setParameter("email", email);
        return ((Long) q.getSingleResult());
    }
    
=======
>>>>>>> 6cfd50639538555ce28e1e7bf8ef397311f4aa3a
    public static Long Usuario.countFindUsuariosByEmailAndContrasenaEquals(String email, String contrasena) {
        if (email == null || email.length() == 0) throw new IllegalArgumentException("The email argument is required");
        if (contrasena == null || contrasena.length() == 0) throw new IllegalArgumentException("The contrasena argument is required");
        EntityManager em = Usuario.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Usuario AS o WHERE o.email = :email AND o.contrasena = :contrasena", Long.class);
        q.setParameter("email", email);
        q.setParameter("contrasena", contrasena);
        return ((Long) q.getSingleResult());
    }
    
<<<<<<< HEAD
    public static Long Usuario.countFindUsuariosByTipo(TipoUsuario tipo) {
        if (tipo == null) throw new IllegalArgumentException("The tipo argument is required");
        EntityManager em = Usuario.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Usuario AS o WHERE o.tipo = :tipo", Long.class);
        q.setParameter("tipo", tipo);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Usuario> Usuario.findUsuariosByEmail(String email) {
        if (email == null || email.length() == 0) throw new IllegalArgumentException("The email argument is required");
        EntityManager em = Usuario.entityManager();
        TypedQuery<Usuario> q = em.createQuery("SELECT o FROM Usuario AS o WHERE o.email = :email", Usuario.class);
        q.setParameter("email", email);
        return q;
    }
    
    public static TypedQuery<Usuario> Usuario.findUsuariosByEmail(String email, String sortFieldName, String sortOrder) {
        if (email == null || email.length() == 0) throw new IllegalArgumentException("The email argument is required");
        EntityManager em = Usuario.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Usuario AS o WHERE o.email = :email");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Usuario> q = em.createQuery(queryBuilder.toString(), Usuario.class);
        q.setParameter("email", email);
        return q;
    }
    
=======
>>>>>>> 6cfd50639538555ce28e1e7bf8ef397311f4aa3a
    public static TypedQuery<Usuario> Usuario.findUsuariosByEmailAndContrasenaEquals(String email, String contrasena) {
        if (email == null || email.length() == 0) throw new IllegalArgumentException("The email argument is required");
        if (contrasena == null || contrasena.length() == 0) throw new IllegalArgumentException("The contrasena argument is required");
        EntityManager em = Usuario.entityManager();
        TypedQuery<Usuario> q = em.createQuery("SELECT o FROM Usuario AS o WHERE o.email = :email AND o.contrasena = :contrasena", Usuario.class);
        q.setParameter("email", email);
        q.setParameter("contrasena", contrasena);
        return q;
    }
    
    public static TypedQuery<Usuario> Usuario.findUsuariosByEmailAndContrasenaEquals(String email, String contrasena, String sortFieldName, String sortOrder) {
        if (email == null || email.length() == 0) throw new IllegalArgumentException("The email argument is required");
        if (contrasena == null || contrasena.length() == 0) throw new IllegalArgumentException("The contrasena argument is required");
        EntityManager em = Usuario.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Usuario AS o WHERE o.email = :email AND o.contrasena = :contrasena");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Usuario> q = em.createQuery(queryBuilder.toString(), Usuario.class);
        q.setParameter("email", email);
        q.setParameter("contrasena", contrasena);
        return q;
    }
    
<<<<<<< HEAD
    public static TypedQuery<Usuario> Usuario.findUsuariosByTipo(TipoUsuario tipo) {
        if (tipo == null) throw new IllegalArgumentException("The tipo argument is required");
        EntityManager em = Usuario.entityManager();
        TypedQuery<Usuario> q = em.createQuery("SELECT o FROM Usuario AS o WHERE o.tipo = :tipo", Usuario.class);
        q.setParameter("tipo", tipo);
        return q;
    }
    
    public static TypedQuery<Usuario> Usuario.findUsuariosByTipo(TipoUsuario tipo, String sortFieldName, String sortOrder) {
        if (tipo == null) throw new IllegalArgumentException("The tipo argument is required");
        EntityManager em = Usuario.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Usuario AS o WHERE o.tipo = :tipo");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Usuario> q = em.createQuery(queryBuilder.toString(), Usuario.class);
        q.setParameter("tipo", tipo);
        return q;
    }
    
=======
>>>>>>> 6cfd50639538555ce28e1e7bf8ef397311f4aa3a
}
