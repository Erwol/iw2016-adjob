// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.uca.iw.domain;

import es.uca.iw.domain.Cv;
import es.uca.iw.domain.Usuario;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Cv_Roo_Finder {
    
    public static Long Cv.countFindCvsByUsuario(Usuario usuario) {
        if (usuario == null) throw new IllegalArgumentException("The usuario argument is required");
        EntityManager em = Cv.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Cv AS o WHERE o.usuario = :usuario", Long.class);
        q.setParameter("usuario", usuario);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Cv> Cv.findCvsByUsuario(Usuario usuario) {
        if (usuario == null) throw new IllegalArgumentException("The usuario argument is required");
        EntityManager em = Cv.entityManager();
        TypedQuery<Cv> q = em.createQuery("SELECT o FROM Cv AS o WHERE o.usuario = :usuario", Cv.class);
        q.setParameter("usuario", usuario);
        return q;
    }
    
    public static TypedQuery<Cv> Cv.findCvsByUsuario(Usuario usuario, String sortFieldName, String sortOrder) {
        if (usuario == null) throw new IllegalArgumentException("The usuario argument is required");
        EntityManager em = Cv.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Cv AS o WHERE o.usuario = :usuario");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Cv> q = em.createQuery(queryBuilder.toString(), Cv.class);
        q.setParameter("usuario", usuario);
        return q;
    }
    
}
